{
  "project_name": "blog_api",
  "files": [
    {
      "path": ".gitignore",
      "content": "# Python\n__pycache__/\n*.py[cod]\n*$py.class\n\n# Virtual environment\nvenv/\nenv/\n.venv/\n\n# Django\n*.sqlite3\n*.log\nmigrations/\n\n# IDE\n.idea/\n.vscode/\n\n# macOS\n.DS_Store\n\n# Other\n*.env\n*.swp\n"
    },
    {
      "path": "README.md",
      "content": "# Blog API\n\nDjango REST Framework API for managing blog posts and comments.\n\n## Setup\n\n1. Clone the repository:\n   ```bash\n   git clone https://github.com/your-username/blog-api.git\n   cd blog-api\n   ```\n\n2. Create a virtual environment and install dependencies:\n   ```bash\n   python -m venv venv\n   source venv/bin/activate  # On Windows: venv\\Scripts\\activate\n   pip install -r requirements.txt\n   ```\n\n3. Apply migrations:\n   ```bash\n   python manage.py makemigrations\n   python manage.py migrate\n   ```\n\n4. Run the server:\n   ```bash\n   python manage.py runserver\n   ```\n\n5. Run tests:\n   ```bash\n   pytest blog/tests.py -v\n   ```\n\n## API Endpoints\n\n- Register: `POST /api/users/`\n- Login: `POST /api/token/`\n- Posts: `GET/POST/PUT/DELETE /api/posts/`\n- Comments: `GET/POST /api/posts/{id}/comments/`, `GET/PUT/DELETE /api/comments/`\n"
    },
    {
      "path": "requirements.txt",
      "content": "Django>=5.0\ndjangorestframework>=3.14\ndjangorestframework-simplejwt>=5.3\npytest>=7.4\npytest-django>=4.5\n"
    },
    {
      "path": "blog_api/__init__.py",
      "content": ""
    },
    {
      "path": "blog_api/settings.py",
      "content": "from pathlib import Path\nfrom datetime import timedelta\n\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nSECRET_KEY = \"your-secret-key\"\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"rest_framework\",\n    \"rest_framework_simplejwt\",\n    \"blog\",\n]\n\nMIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.Middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.Middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.Middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n]\n\nROOT_URLCONF = \"blog_api.urls\"\n\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",\n                \"django.contrib.messages.context_processors.messages\",\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = \"blog_api.wsgi.application\"\n\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",\n        \"NAME\": BASE_DIR / \"db.sqlite3\",\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.NumericPasswordValidator\",\n    },\n]\n\nREST_FRAMEWORK = {\n    \"DEFAULT_AUTHENTICATION_CLASSES\": (\n        \"rest_framework_simplejwt.authentication.JWTAuthentication\",\n    ),\n    \"DEFAULT_PERMISSION_CLASSES\": (\n        \"rest_framework.permissions.IsAuthenticated\",\n    ),\n}\n\nSIMPLE_JWT = {\n    \"ACCESS_TOKEN_LIFETIME\": timedelta(minutes=30),\n    \"SLIDING_TOKEN_REFRESH_LIFETIME\": timedelta(days=1),\n    \"ALGORITHM\": \"HS256\",\n    \"SIGNING_KEY\": SECRET_KEY,\n    \"AUTH_HEADER_TYPES\": (\"Bearer\",),\n}\n\nLANGUAGE_CODE = \"en-us\"\n\nTIME_ZONE = \"UTC\"\n\nUSE_I18N = True\n\nUSE_TZ = True\n\nSTATIC_URL = \"static/\"\n\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n"
    },
    {
      "path": "blog_api/urls.py",
      "content": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path(\"admin/\", admin.site.urls),\n    path(\"api/\", include(\"blog.urls\")),\n]\n"
    },
    {
      "path": "blog_api/wsgi.py",
      "content": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"blog_api.settings\")\n\napplication = get_wsgi_application()\n"
    },
    {
      "path": "blog/__init__.py",
      "content": ""
    },
    {
      "path": "blog/models.py",
      "content": "from django.db import models\nfrom django.contrib.auth.models import User\n\n\nclass Post(models.Model):\n    title = models.CharField(max_length=100)\n    content = models.TextField(max_length=1000)\n    created_at = models.DateTimeField(auto_now_add=True)\n    author = models.ForeignKey(\n        User,\n        on_delete=models.CASCADE,\n        related_name=\"posts\"\n    )\n\n    class Meta:\n        indexes = [\n            models.Index(fields=[\"title\"]),\n            models.Index(fields=[\"author\"]),\n        ]\n\n    def __str__(self):\n        return self.title\n\n\nclass Comment(models.Model):\n    text = models.TextField(max_length=500)\n    created_at = models.DateTimeField(auto_now_add=True)\n    post = models.ForeignKey(\n        Post,\n        on_delete=models.CASCADE,\n        related_name=\"comments\"\n    )\n    author = models.ForeignKey(\n        User,\n        on_delete=models.CASCADE,\n        related_name=\"comments\"\n    )\n\n    class Meta:\n        indexes = [\n            models.Index(fields=[\"post\", \"author\"]),\n        ]\n\n    def __str__(self):\n        return f\"Comment by {self.author} on {self.post}\"\n"
    },
    {
      "path": "blog/serializers.py",
      "content": "from rest_framework import serializers\nfrom django.contrib.auth.models import User\nfrom .models import Post, Comment\n\n\nclass UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = [\"id\", \"username\"]\n\n\nclass CommentSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Comment\n        fields = [\"id\", \"text\", \"created_at\", \"post\", \"author\"]\n        read_only_fields = [\"created_at\", \"author\"]\n\n    def validate_text(self, value):\n        if len(value) < 1:\n            raise serializers.ValidationError(\"Text cannot be empty.\")\n        if len(value) > 500:\n            raise serializers.ValidationError(\"Text cannot exceed 500 characters.\")\n        return value\n\n    def validate_post(self, value):\n        if not Post.objects.filter(id=value.id).exists():\n            raise serializers.ValidationError(\"Post not found.\")\n        return value\n\n\nclass PostSerializer(serializers.ModelSerializer):\n    comments = CommentSerializer(many=True, read_only=True)\n\n    class Meta:\n        model = Post\n        fields = [\"id\", \"title\", \"content\", \"created_at\", \"author\", \"comments\"]\n        read_only_fields = [\"created_at\", \"author\"]\n\n    def validate_title(self, value):\n        if len(value) < 1:\n            raise serializers.ValidationError(\"Title cannot be empty.\")\n        if len(value) > 100:\n            raise serializers.ValidationError(\"Title cannot exceed 100 characters.\")\n        return value\n\n    def validate_content(self, value):\n        if len(value) < 1:\n            raise serializers.ValidationError(\"Content cannot be empty.\")\n        if len(value) > 1000:\n            raise serializers.ValidationError(\"Content cannot exceed 1000 characters.\")\n        return value\n\n\nclass UserCreateSerializer(serializers.ModelSerializer):\n    password = serializers.CharField(write_only=True, min_length=6)\n\n    class Meta:\n        model = User\n        fields = [\"username\", \"password\"]\n\n    def validate_username(self, value):\n        if len(value) < 3:\n            raise serializers.ValidationError(\"Username must be at least 3 characters.\")\n        if len(value) > 50:\n            raise serializers.ValidationError(\"Username cannot exceed 50 characters.\")\n        if User.objects.filter(username=value).exists():\n            raise serializers.ValidationError(\"Username already exists.\")\n        return value\n\n    def create(self, validated_data):\n        user = User.objects.create_user(\n            username=validated_data[\"username\"],\n            password=validated_data[\"password\"]\n        )\n        return user\n"
    },
    {
      "path": "blog/views.py",
      "content": "from rest_framework import viewsets, status\nfrom rest_framework.decorators import action\nfrom rest_framework.response import Response\nfrom rest_framework.permissions import IsAuthenticated\nfrom django.contrib.auth.models import User\nfrom .models import Post, Comment\nfrom .serializers import PostSerializer, CommentSerializer, UserCreateSerializer\nfrom .permissions import IsOwner\n\n\nclass UserViewSet(viewsets.ViewSet):\n    def create(self, request):\n        serializer = UserCreateSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n\nclass PostViewSet(viewsets.ModelViewSet):\n    queryset = Post.objects.all()\n    serializer_class = PostSerializer\n    permission_classes = [IsAuthenticated, IsOwner]\n\n    def get_queryset(self):\n        return self.queryset.filter(author=self.request.user)\n\n    def perform_create(self, serializer):\n        serializer.save(author=self.request.user)\n\n    @action(detail=True, methods=[\"get\", \"post\"], url_path=\"comments\")\n    def comments(self, request, pk=None):\n        post = self.get_object()\n        if request.method == \"GET\":\n            comments = Comment.objects.filter(\n                post=post,\n                author=request.user\n            )\n            serializer = CommentSerializer(comments, many=True)\n            return Response(serializer.data)\n        elif request.method == \"POST\":\n            serializer = CommentSerializer(data=request.data)\n            if serializer.is_valid():\n                serializer.save(post=post, author=request.user)\n                return Response(serializer.data, status=status.HTTP_201_CREATED)\n            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n\nclass CommentViewSet(viewsets.ModelViewSet):\n    queryset = Comment.objects.all()\n    serializer_class = CommentSerializer\n    permission_classes = [IsAuthenticated, IsOwner]\n\n    def get_queryset(self):\n        return self.queryset.filter(author=self.request.user)\n\n    def perform_create(self, serializer):\n        serializer.save(author=self.request.user)\n"
    },
    {
      "path": "blog/permissions.py",
      "content": "from rest_framework import permissions\n\n\nclass IsOwner(permissions.BasePermission):\n    def has_object_permission(self, request, view, obj):\n        return obj.author == request.user\n"
    },
    {
      "path": "blog/urls.py",
      "content": "from django.urls import path, include\nfrom rest_framework.routers import DefaultRouter\nfrom rest_framework_simplejwt.views import (\n    TokenObtainPairView,\n    TokenRefreshView,\n)\nfrom .views import PostViewSet, CommentViewSet, UserViewSet\n\nrouter = DefaultRouter()\nrouter.register(r\"posts\", PostViewSet, basename=\"post\")\nrouter.register(r\"comments\", CommentViewSet, basename=\"comment\")\nrouter.register(r\"users\", UserViewSet, basename=\"user\")\n\nurlpatterns = [\n    path(\"\", include(router.urls)),\n    path(\"token/\", TokenObtainPairView.as_view(), name=\"token_obtain_pair\"),\n    path(\"token/refresh/\", TokenRefreshView.as_view(), name=\"token_refresh\"),\n]\n"
    },
    {
      "path": "blog/tests.py",
      "content": "from django.urls import reverse\nfrom django.contrib.auth.models import User\nfrom rest_framework.test import APITestCase\nfrom rest_framework import status\nfrom .models import Post, Comment\nfrom .serializers import PostSerializer, CommentSerializer\n\n\nclass BlogAPITestCase(APITestCase):\n    def setUp(self):\n        self.user = User.objects.create_user(\n            username=\"testuser\",\n            password=\"testpassword\"\n        )\n        self.other_user = User.objects.create_user(\n            username=\"otheruser\",\n            password=\"otherpassword\"\n        )\n        self.client.force_authenticate(user=self.user)\n        self.post = Post.objects.create(\n            title=\"Test Post\",\n            content=\"Test Content\",\n            author=self.user\n        )\n        self.comment = Comment.objects.create(\n            text=\"Test Comment\",\n            post=self.post,\n            author=self.user\n        )\n\n    def get_token(self, username=\"testuser\", password=\"testpassword\"):\n        response = self.client.post(\n            reverse(\"token_obtain_pair\"),\n            {\"username\": username, \"password\": password}\n        )\n        return response.data[\"access\"]\n\n    def test_register_user(self):\n        self.client.force_authenticate(user=None)\n        response = self.client.post(\n            reverse(\"user-list\"),\n            {\"username\": \"newuser\", \"password\": \"newpassword\"}\n        )\n        self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n        self.assertEqual(response.data[\"username\"], \"newuser\")\n\n    def test_register_invalid_data(self):\n        self.client.force_authenticate(user=None)\n        response = self.client.post(\n            reverse(\"user-list\"),\n            {\"username\": \"ab\", \"password\": \"123\"}\n        )\n        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n        self.assertIn(\"username\", response.data)\n\n    def test_register_duplicate_user(self):\n        self.client.force_authenticate(user=None)\n        self.client.post(\n            reverse(\"user-list\"),\n            {\"username\": \"newuser\", \"password\": \"newpassword\"}\n        )\n        response = self.client.post(\n            reverse(\"user-list\"),\n            {\"username\": \"newuser\", \"password\": \"newpassword\"}\n        )\n        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n        self.assertIn(\"username\", response.data)\n\n    def test_login(self):\n        self.client.force_authenticate(user=None)\n        response = self.client.post(\n            reverse(\"token_obtain_pair\"),\n            {\"username\": \"testuser\", \"password\": \"testpassword\"}\n        )\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        self.assertIn(\"access\", response.data)\n\n    def test_login_invalid_credentials(self):\n        self.client.force_authenticate(user=None)\n        response = self.client.post(\n            reverse(\"token_obtain_pair\"),\n            {\"username\": \"testuser\", \"password\": \"wrongpassword\"}\n        )\n        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)\n\n    def test_create_post(self):\n        response = self.client.post(\n            reverse(\"post-list\"),\n            {\"title\": \"New Post\", \"content\": \"New Content\"}\n        )\n        self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n        self.assertEqual(response.data[\"title\"], \"New Post\")\n        self.assertEqual(response.data[\"author\"], self.user.id)\n\n    def test_create_post_invalid_data(self):\n        response = self.client.post(\n            reverse(\"post-list\"),\n            {\"title\": \"\", \"content\": \"a\" * 1001}\n        )\n        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n        self.assertIn(\"title\", response.data)\n        self.assertIn(\"content\", response.data)\n\n    def test_create_post_unauthorized(self):\n        self.client.force_authenticate(user=None)\n        response = self.client.post(\n            reverse(\"post-list\"),\n            {\"title\": \"New Post\", \"content\": \"New Content\"}\n        )\n        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)\n\n    def test_get_posts(self):\n        response = self.client.get(reverse(\"post-list\"))\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        self.assertEqual(len(response.data), 1)\n        self.assertEqual(response.data[0][\"title\"], \"Test Post\")\n        self.assertEqual(len(response.data[0][\"comments\"]), 1)\n        self.assertEqual(response.data[0][\"comments\"][0][\"text\"], \"Test Comment\")\n\n    def test_update_post(self):\n        response = self.client.put(\n            reverse(\"post-detail\", args=[self.post.id]),\n            {\"title\": \"Updated Post\", \"content\": \"Updated Content\"}\n        )\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        self.assertEqual(response.data[\"title\"], \"Updated Post\")\n        self.assertEqual(response.data[\"content\"], \"Updated Content\")\n\n    def test_update_post_unauthorized(self):\n        self.client.force_authenticate(user=None)\n        response = self.client.put(\n            reverse(\"post-detail\", args=[self.post.id]),\n            {\"title\": \"Updated Post\"}\n        )\n        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)\n\n    def test_update_post_not_owner(self):\n        self.client.force_authenticate(user=self.other_user)\n        response = self.client.put(\n            reverse(\"post-detail\", args=[self.post.id]),\n            {\"title\": \"Updated Post\"}\n        )\n        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)\n\n    def test_delete_post(self):\n        response = self.client.delete(reverse(\"post-detail\", args=[self.post.id]))\n        self.assertEqual(response.status_code, status.HTTP_204_NO_CONTENT)\n        response = self.client.get(reverse(\"post-list\"))\n        self.assertEqual(len(response.data), 0)\n\n    def test_delete_post_unauthorized(self):\n        self.client.force_authenticate(user=None)\n        response = self.client.delete(reverse(\"post-detail\", args=[self.post.id]))\n        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)\n\n    def test_delete_post_not_owner(self):\n        self.client.force_authenticate(user=self.other_user)\n        response = self.client.delete(reverse(\"post-detail\", args=[self.post.id]))\n        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)\n\n    def test_create_comment(self):\n        response = self.client.post(\n            reverse(\"post-comments\", args=[self.post.id]),\n            {\"text\": \"New Comment\"}\n        )\n        self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n        self.assertEqual(response.data[\"text\"], \"New Comment\")\n        self.assertEqual(response.data[\"post\"], self.post.id)\n        self.assertEqual(response.data[\"author\"], self.user.id)\n\n    def test_create_comment_invalid_data(self):\n        response = self.client.post(\n            reverse(\"post-comments\", args=[self.post.id]),\n            {\"text\": \"\"}\n        )\n        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n        self.assertIn(\"text\", response.data)\n\n    def test_create_comment_invalid_post(self):\n        response = self.client.post(\n            reverse(\"post-comments\", args=[999]),\n            {\"text\": \"New Comment\"}\n        )\n        self.assertEqual(response.status_code, status.HTTP_404_NOT_FOUND)\n\n    def test_get_comments(self):\n        response = self.client.get(reverse(\"post-comments\", args=[self.post.id]))\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        self.assertEqual(len(response.data), 1)\n        self.assertEqual(response.data[0][\"text\"], \"Test Comment\")\n\n    def test_get_comments_invalid_post(self):\n        response = self.client.get(reverse(\"post-comments\", args=[999]))\n        self.assertEqual(response.status_code, status.HTTP_404_NOT_FOUND)\n\n    def test_update_comment(self):\n        response = self.client.put(\n            reverse(\"comment-detail\", args=[self.comment.id]),\n            {\"text\": \"Updated Comment\", \"post\": self.post.id}\n        )\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        self.assertEqual(response.data[\"text\"], \"Updated Comment\")\n\n    def test_update_comment_unauthorized(self):\n        self.client.force_authenticate(user=None)\n        response = self.client.put(\n            reverse(\"comment-detail\", args=[self.comment.id]),\n            {\"text\": \"Updated Comment\", \"post\": self.post.id}\n        )\n        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)\n\n    def test_update_comment_not_owner(self):\n        self.client.force_authenticate(user=self.other_user)\n        response = self.client.put(\n            reverse(\"comment-detail\", args=[self.comment.id]),\n            {\"text\": \"Updated Comment\", \"post\": self.post.id}\n        )\n        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)\n\n    def test_delete_comment(self):\n        response = self.client.delete(\n            reverse(\"comment-detail\", args=[self.comment.id])\n        )\n        self.assertEqual(response.status_code, status.HTTP_204_NO_CONTENT)\n        response = self.client.get(reverse(\"post-comments\", args=[self.post.id]))\n        self.assertEqual(len(response.data), 0)\n\n    def test_delete_comment_unauthorized(self):\n        self.client.force_authenticate(user=None)\n        response = self.client.delete(\n            reverse(\"comment-detail\", args=[self.comment.id])\n        )\n        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)\n\n    def test_delete_comment_not_owner(self):\n        self.client.force_authenticate(user=self.other_user)\n        response = self.client.delete(\n            reverse(\"comment-detail\", args=[self.comment.id])\n        )\n        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)\n\n    def test_user_isolation(self):\n        self.client.force_authenticate(user=self.other_user)\n        response = self.client.get(reverse(\"post-list\"))\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        self.assertEqual(len(response.data), 0)\n        response = self.client.get(reverse(\"post-comments\", args=[self.post.id]))\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        self.assertEqual(len(response.data), 0)\n"
    }
  ]
}